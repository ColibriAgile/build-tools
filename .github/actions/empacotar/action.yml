name: Empacotar arquivos
description: >-
  Empacota arquivos utilizando o BuildTools. Baixa automaticamente a versão mais recente do BuildTools.exe do repositório ColibriAgile/build-tools e executa o empacotamento de arquivos, recebendo como parâmetros a pasta de origem, a pasta de destino, versão, develop e opções extras. Ideal para automatizar o empacotamento de arquivos em pipelines CI/CD.

inputs:
  pasta-origem:
    description: Caminho da pasta de origem dos arquivos a serem empacotados
    required: true
  pasta-destino:
    description: Caminho da pasta de destino dos arquivos empacotados
    required: true
  versao:
    description: Versão do pacote a ser empacotado
    required: true
  develop:
    description: Indica se é ambiente de desenvolvimento (true/false)
    required: true
  extras:
    description: Parâmetros extras para o BuildTools (opcional)
    required: false

outputs:
  caminho-cmpkg:
    description: Caminho completo do arquivo .cmpkg gerado
    value: ${{ steps.arquivo-gerado.outputs.caminho }}
  nome-cmpkg:
    description: Nome do arquivo .cmpkg gerado
    value: ${{ steps.arquivo-gerado.outputs.nome }}

runs:
  using: composite
  steps:
    # Baixa o BuildTools.exe mais recente do repositório ColibriAgile/build-tools
    - name: Baixar buildTools.exe do GitHub Releases
      uses: robinraju/release-downloader@v1
      with:
        repository: ColibriAgile/build-tools
        latest: true
        fileName: BuildTools.exe
        token: ${{ github.token }}

    # Executa o BuildTools.exe para empacotar os arquivos conforme os parâmetros recebidos
    - name: Executar buildTools.exe (empacotar)
      shell: pwsh
      run: |
        try {
          .\BuildTools.exe empacotar `
            --pasta "${{ inputs.pasta-origem }}" `
            --saida "${{ inputs.pasta-destino }}" `
            --versao "${{ inputs.versao }}" `
            --develop "${{ inputs.develop }}" `
            --resumo console `
            --sem-cor `
            ${{ inputs.extras }}
        } catch {
          Write-Error "Erro ao executar BuildTools.exe:$($_.Exception.Message)"
          exit 1
        }

    # Encontra o arquivo .cmpkg gerado na pasta de destino e exporta como outputs
    - name: Encontrar arquivo gerado
      id: arquivo-gerado
      shell: pwsh
      run: |
        $arquivos = Get-ChildItem -Path "${{ inputs.pasta-destino }}" -Filter *.cmpkg | Sort-Object LastWriteTime -Descending
        if ($arquivos.Count -eq 0) {
          Write-Error "Nenhum arquivo .cmpkg encontrado na pasta de destino."
          exit 1
        }
        $caminho = $arquivos[0].FullName
        $nome = $arquivos[0].Name
        "caminho=$caminho" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8NoBom -Append
        "nome=$nome" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8NoBom -Append
